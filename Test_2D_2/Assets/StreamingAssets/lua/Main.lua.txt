--[[
    程序入口
--]]

--package.path = package.path .. ';../protobuf/?.lua.txt'
--package.cpath = package.cpath .. ';../protobuf/?.so'

UE = CS.UnityEngine

---需要先运行的module
require("Enum")
local net=require("NetManager")
local Timer = require("Timer")

local Battle = require("Battle")
local ResourceMgr = require("ResourceManager")
local PathMgr = require("PathManager")
local SceneMgr = require("SceneManager")
local MC = require("MessageCenter")
local Camera = require("CameraFollowing")
-------------------------------
--初始化
function Init()
    InitTitle()
end

--主循环
function MainLoop()
    Timer:Update()
    --print(UE.Input.mousePosition)
end

--退出游戏处理
function Quit()
    print("Quit")
end
------------------------------

Main=UE.GameObject.Find("Main"):GetComponent("Main")

function InitTitle()

    --local title = ResourceMgr:GetGameObject("Prefabs/UI_Title", nil, Main.UIRoot.transform)

    --SceneMgr:LoadScene(1)
    --local go = UE.GameObject()
    local character = require("Character"):new()
    Camera:BeginFollow(character.gameobject:GetComponent("Transform"))
    Battle:SetBattle(character, require("Normal_pistol").new())
    --net:Connect("127.0.0.1", 10000)
    --net:SendMessage("hello")
    --local go = ResourceMgr:GetGameObject("assetbundle/prefabs/ui/title/bg.ab", "bg", Main.UIRoot.transform)
    --ResourceMgr:DestroyObject(go)
    --

    --local newGo =  ResourceMgr:GetGameObject("assetbundle/prefabs/ui/title/bg.ab", "bg")

    --go = ResourceMgr:Load(Engine.Application.streamingAssetsPath.."/assetbundle/prefabs/ui/title/bg.ab")
    --go=CS.Main.LoadPrefabs("Prefabs/UI/Title/BG",Main.UIRoot.transform)
    --ResourceMgr:Instantiate(go, Main.UIRoot.transform)
    --print(PathMgr:GetName(Engine.Application.streamingAssetsPath.."/assetbundle/prefabs/ui/title/bg.ab"))

    --local role = require("Character"):new()
    --role:Move()

    --local kv = require("KeyValue"):new("hello")
    --print(kv.Key)
    --local kv2 = require("KeyValue"):new("world")
    --print(kv2.Key)


    --MC:AddListener("hello", HandleHello)
    --kv = require("KeyValue"):new("nice to meet you")
    --MC:SendMessage("hello", kv)
    --MC:RemoveMessageType("hello")
    --MC:SendMessage("hello", kv)
end

function HandleHello(kv)
    print(kv.Key)
end

function GetProxy(sourceTable, path)
    proxy={}
    mate={
        __newindex=function(t, key, newValue)
            local oldValue=sourceTable[key]
            if not oldValue then
                --send Add
            elseif not newValue then
                --send Remove
            else
                --send Change
            end
            sourceTable[key]=newValue
        end,

        __len=function()
            return #sourceTable
        end
    }

    setmetatable(proxy, mate)
    return proxy
end

---class封装
---实例化时会自动先后调用(如果有)父类和自己的cotr函数
function Class(className, super)

    local TheClass = {name = className, super = super}

    if super then
        local type = type(super)
        if type ~= "table" and type ~= "function" then
            print("wrong super type!")
            return nil;
        else
            setmetatable(TheClass, {__index = super})
        end
    end

    function TheClass:new(...)

        --使用以下代码能够实现内存意义上的实例化，但浪费空间
        --local instance = {}
        --for k, v in pairs(TheClass) do
        --    instance[k] = v
        --end

        --使用以下代码能够实现表面上的实例化，不浪费空间，但是在 传self时要注意
        local instance = setmetatable( {}, {__index=TheClass})

        local super = getmetatable(instance)["__index"]["super"]
        if  super ~= nil then
            if super["cotr"] ~= nil then
                super.cotr(instance, ...)
            end
        end
        if instance["cotr"] then
            instance.cotr(instance, ...)
        end
        return instance
    end

    return TheClass
end